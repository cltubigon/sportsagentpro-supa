import {
  collection,
  addDoc,
  deleteDoc,
  updateDoc,
  doc,
  getDoc,
  Timestamp,
  setDoc,
} from "firebase/firestore"
import { db } from "../../config/fbConfig"

export const createNewPost = () => async (dispatch, getState) => {
    const build = getState().build
    console.log('build: ', build)
    // const uid = getState().firebase.auth.uid
    // const email = getState().firebase.auth.email
    // console.log("email: ", email)
    // const firestore = getFirestore()
    // const {
    //   activeStep,
    //   submissionType,
    //   recipients,
    //   isProcessedSuccesfully,
    //   editMode,
    //   ...newObject
    // } = build
    // console.log("newObject: ", newObject)
    // const sanitizedObject = JSON.parse(JSON.stringify(newObject))

    // console.log("sanitizedObject: ", sanitizedObject)
    // try {
    //   // Add a new document
    //   const docRef = await addDoc(collection(firestore, "posts"), {
    //     ...sanitizedObject,
    //   })

    //   // Get the auto-generated document ID
    //   const autoGeneratedId = docRef.id
    //   console.log("docRef: ", docRef)

    //   // Update the document with the auto-generated ID as the "id" field
    //   await setDoc(doc(firestore, "posts", autoGeneratedId), {
    //     id: autoGeneratedId,
    //     ...sanitizedObject,
    //     ownerUID: uid,
    //     postOwner: email,
    //     created_at: new Date(),
    //   })
    //   console.log("first stage", sanitizedObject)

    //   // Update an existing document
    //   const logId = "C0smjlIYwHzvfRMqPIZs"
    //   const timestamp = Timestamp.fromDate(new Date())
    //   const data = { posts_last_updated: timestamp }
    //   await updateDoc(doc(firestore, "logs", logId), data)

    //   console.log("second stage", sanitizedObject)
    //   dispatch({ type: "CREATE_POST", sanitizedObject })
    //   console.log("dispatch stage")
    // } catch (err) {
    //   console.log("err: ", err)
    //   dispatch({ type: "CREATE_POST_ERROR", err })
    // }
  }
// export const createNewPost = () => {
//   console.log("Hi, I am creating new post")
//   return async (dispatch, getState, { getFirebase, getFirestore }) => {
//     const build = getState().build
//     const uid = getState().firebase.auth.uid
//     const email = getState().firebase.auth.email
//     console.log("email: ", email)
//     const firestore = getFirestore()
//     const {
//       activeStep,
//       submissionType,
//       recipients,
//       isProcessedSuccesfully,
//       editMode,
//       ...newObject
//     } = build
//     console.log("newObject: ", newObject)
//     const sanitizedObject = JSON.parse(JSON.stringify(newObject))

//     console.log("sanitizedObject: ", sanitizedObject)
//     try {
//       // Add a new document
//       const docRef = await addDoc(collection(firestore, "posts"), {
//         ...sanitizedObject,
//       })

//       // Get the auto-generated document ID
//       const autoGeneratedId = docRef.id
//       console.log("docRef: ", docRef)

//       // Update the document with the auto-generated ID as the "id" field
//       await setDoc(doc(firestore, "posts", autoGeneratedId), {
//         id: autoGeneratedId,
//         ...sanitizedObject,
//         ownerUID: uid,
//         postOwner: email,
//         created_at: new Date(),
//       })
//       console.log("first stage", sanitizedObject)

//       // Update an existing document
//       const logId = "C0smjlIYwHzvfRMqPIZs"
//       const timestamp = Timestamp.fromDate(new Date())
//       const data = { posts_last_updated: timestamp }
//       await updateDoc(doc(firestore, "logs", logId), data)

//       console.log("second stage", sanitizedObject)
//       dispatch({ type: "CREATE_POST", sanitizedObject })
//       console.log("dispatch stage")
//     } catch (err) {
//       console.log("err: ", err)
//       dispatch({ type: "CREATE_POST_ERROR", err })
//     }
//   }
// }
export const withdrawToPost = (postId, email) => async (dispatch, getState) => {
  const myOpportunitiesPosts = getState().post.myOpportunitiesPosts
  const updatedOpportunitiesPosts = (updatedPost) => {
    const data = myOpportunitiesPosts.map((opp) => {
      if (opp.id === updatedPost.id) {
        return updatedPost
      }
      return opp
    })
    console.log("data: ", data)
    dispatch({ type: "UPDATED_ALL_OPPORTUNITY_POSTS", payload: data })
  }
  try {
    const ref = doc(db, "posts", postId)
    const postSnapshot = await getDoc(ref)
    const postDoc = postSnapshot.data()
    const currentApplicants = postDoc.postApplicants
    const applicants = currentApplicants.filter(
      (applicantEmail) => applicantEmail !== email
    )
    const updatedPost = { ...postDoc, postApplicants: applicants }
    updatedOpportunitiesPosts(updatedPost)
    await updateDoc(ref, updatedPost)
    console.log("withdrawed successfully")
  } catch (error) {
    console.error("Error withrawing post:", error)
  }
}

export const applyToPost = (postId, email) => async (dispatch, getState) => {
  const myOpportunitiesPosts = getState().post.myOpportunitiesPosts
  const updatedOpportunitiesPosts = (updatedPost) => {
    const data = myOpportunitiesPosts.map((opp) => {
      if (opp.id === updatedPost.id) {
        return updatedPost
      }
      return opp
    })
    console.log("data: ", data)
    dispatch({ type: "UPDATED_ALL_OPPORTUNITY_POSTS", payload: data })
  }
  try {
    const ref = doc(db, "posts", postId)
    const postSnapshot = await getDoc(ref)
    const postDoc = postSnapshot.data()
    const updatedPost = {
      ...postDoc,
      postApplicants: [...postDoc.postApplicants, email],
    }
    updatedOpportunitiesPosts(updatedPost)
    await updateDoc(ref, updatedPost)
    console.log("applied successfully")
  } catch (error) {
    console.error("Error withrawing post:", error)
  }
}

export const SET_IS_LOADING = (payload) => (dispatch) => {
  dispatch({ type: "SET_IS_LOADING", payload })
}

export const savePostsToStorage = (payload) => {
  console.log("SAVE_POSTS_TO_STORAGE", payload)
  return (dispatch) => {
    dispatch({ type: "SAVE_POSTS_TO_STORAGE", payload })
  }
}
export const resetPostState = (payload) => {
  console.log("RESET_POST_STATE", payload)
  return (dispatch) => {
    dispatch({ type: "RESET_POST_STATE", payload })
  }
}
